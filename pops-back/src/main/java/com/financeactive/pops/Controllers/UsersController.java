package com.financeactive.pops.Controllers;

import com.financeactive.pops.Entities.Manager;
import com.financeactive.pops.Entities.User;
import com.financeactive.pops.Entities.UsersRole;
import com.financeactive.pops.Repositories.ManagerRepository;
import com.financeactive.pops.Repositories.UserRepository;
import com.financeactive.pops.Repositories.UserRoleRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import java.util.Collections;
import java.util.Date;
import java.util.List;


@CrossOrigin(origins = "http://localhost:8080",maxAge = 3600)
@Controller    // This means that this class is a Controller
@RequestMapping(path = "/users") // This means URL's start with /demo (after Application path)
public class UsersController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    private UserRoleRepository userRoleRepository;
    private ManagerRepository managerRepository;
    private BCryptPasswordEncoder bCryptPasswordEncoder;

    public UsersController(UserRoleRepository userRoleRepository, UserRepository userRepository, ManagerRepository managerRepository,
                           BCryptPasswordEncoder bCryptPasswordEncoder) {
        this.userRoleRepository = userRoleRepository;
        this.userRepository = userRepository;
        this.managerRepository = managerRepository;
        this.bCryptPasswordEncoder = bCryptPasswordEncoder;
    }

    @RequestMapping(path = "/add", method = RequestMethod.POST)
    @ResponseBody
    public ResponseEntity addNewUser(@RequestParam String name, @RequestParam String email,
                                     @RequestParam String role_type, @RequestParam String firstname,
                                     @RequestParam String contract, @RequestParam String location,
                                     @RequestParam String department, @RequestParam String service,
                                     @RequestParam String business_unit,
                                     @RequestParam String manager_name,
                                     @RequestParam boolean got_iphone,
                                     @RequestParam Date date_start,
                                     @RequestParam (required = false) String job_title,
//                                     @RequestParam(required = false) int manager_id,
                                     @RequestParam(required = false) Date date_end,
                                     @RequestParam(required = false) boolean is_enabled,
                                     @RequestParam(required = false) String password) {

        User n = new User(); // User instanci√©
        if(name.isEmpty() && email.isEmpty() && password.isEmpty() && firstname.isEmpty() && contract.isEmpty()
                && department.isEmpty() && location.isEmpty()){
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }
        n.setName(name);
        n.setEmail(email);
        n.setPassword(password);
        n.setFirstname(firstname);
        n.setContract(contract);
        n.setDepartment(department);
        n.setLocation(location);
        n.setDate_start(date_start);
        n.setBusiness_unit(business_unit);
        n.setGot_iphone(got_iphone);
        n.setService(service);
        n.setRole_type(role_type);
        n.setJob_title(job_title);
        n.setManager_name(manager_name);

        // IL FAUT RECUPERER L'ID DE L'ENTITY MANAGER et non DE ENTITY USER !!! A REFAIRE
//      1. recuperer l'id (new user donc id inexistant) => update 2.utiliser l'id pour instancier le manager depuis userRepository
//        List<User> managers = userRepository.findById(manager_id);
//        if(managers.isEmpty()){
            // 4. si il est null retourne 404, message le manager n'existe pas
//            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
//        } else {
//            User manager = managers.get(0);
//            n.setManager(manager);
//        }
//        n.setManager_id(manager_id);

        Date date_fin = new Date((1970-1-1));
        if(date_end == date_fin){ n.setDate_end(null); }
        if(date_end != null){ n.setDate_end(date_end); }

        if(is_enabled==false){ is_enabled = true; }
        n.setIs_enabled(is_enabled);

        userRepository.save(n);
        return new ResponseEntity<>(HttpStatus.OK);
    }

    @RequestMapping(path = "/list", method = RequestMethod.GET)
//    @PreAuthorize("hasAuthority('read:users')")
//    @PreAuthorize("hasRole('admin')")
    @ResponseBody
    public ResponseEntity getAllUsers() { // return 200 + list

        return new ResponseEntity<>(userRepository.findAll(),HttpStatus.OK);

    }

//    @RequestMapping(path = "/list/{role_type}", method = RequestMethod.GET)
////    @PreAuthorize("hasAuthority('read:users')")  // MANAGE LES DROITS D'ACCES A L'API avec le scope
//    @ResponseBody
//    public ResponseEntity getAllUsers(@PathVariable String role_type) { // return 200 + list
//        List<User> users = userRepository.findByRole_type(role_type);
//        User u = users.get(0);
//        if(u == null){
//            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
//        }
//
//        if(role_type.equals("end_user")){ // END USER NE VOIT PAS LA LISTE COMPLETE DES USER
//            return new ResponseEntity<>(HttpStatus.FORBIDDEN); // WORK FINE !
//        }else
//            if(role_type.equals("rh")){ // RH VOIT LA LISTE COMPLETE DES USERS
//                // RETURN A USER LIST FROM A RESPONSE ENTITY METHOD TYPE
//                return new ResponseEntity<>(userRepository.findAll(),HttpStatus.OK); // WORK FINE !
//            } else
//                if(role_type.equals("admin")){ // SAME WAY OF RH
//            return new ResponseEntity<>(userRepository.findAll(),HttpStatus.OK); // WORK FINE !
//                } else
////                    if(role_type.equals("test")){
////            return new ResponseEntity<>(userRepository.findAll(),HttpStatus.OK); //
////                    }
//        return new ResponseEntity<>(HttpStatus.OK);
//    }

    @RequestMapping(path = "/listbymanager/{manager_name}", method = RequestMethod.GET)
    @ResponseBody
    public ResponseEntity getUsersByManager(@PathVariable String manager_name) {
        // This returns a JSON or XML with the users
//        List<User> users = (List<User>) userRepository.findAll();
        List<User> users = userRepository.findByManager_name(manager_name);
;        if(manager_name.isEmpty()){ return new ResponseEntity<>(HttpStatus.NOT_FOUND); }
            else
        return new ResponseEntity<>(users,HttpStatus.OK);
    }



    @RequestMapping(path = "/login", method = RequestMethod.GET)
    @ResponseBody
    public ResponseEntity<User> login(@RequestParam String email, @RequestParam String password) {

        List<User> users = userRepository.findByEmailAndPassword(email, password);

        if (users.isEmpty()) { return new ResponseEntity<>(HttpStatus.UNAUTHORIZED); }
        else { return new ResponseEntity<>(users.get(0), HttpStatus.OK); }
    }

    /// CORRIGER LA METHODE UPDATE ! ////
    @RequestMapping(path = "/update/{id}", method = RequestMethod.PUT)
    @ResponseBody
    public ResponseEntity updateUser(@PathVariable String id,
                                     @RequestParam(required = false) String role_type,
                                     @RequestParam(required = false) String manager_name,
                                     @RequestParam(required = false) String password,
                                     @RequestParam(required = false) String firstname,
                                     @RequestParam(required = false) String contract,
                                     @RequestParam(required = false) String location,
                                     @RequestParam(required = false) String department,
                                     @RequestParam(required = false) Date date_start,
                                     @RequestParam(required = false) Date date_end,
                                     @RequestParam(required = false) String name,
                                     @RequestParam(required = false) String email,
                                     @RequestParam(required = false) boolean is_enabled,
                                     @RequestParam(required = false) String service,
                                     @RequestParam(required = false) boolean got_iphone,
                                     @RequestParam(required = false) String business_unit)
    {
        List<User> users = userRepository.findById(Integer.parseInt(id));
        if(users.isEmpty()){ return new ResponseEntity<>(HttpStatus.NOT_FOUND); }

        User inbound = users.get(0);
        String nom;
        nom = inbound.getName();
        if(name == null){ inbound.setName(nom);}
        if (name!=null) { inbound.setName(name); }

        inbound.setIs_enabled(is_enabled);

        String mail;
        mail = inbound.getEmail();
        if(email == null){ inbound.setEmail(mail); }
        if (email!=null) { inbound.setEmail(email); }

        String mdp;
        mdp = inbound.getPassword();
        /*if(mdp !=null){ */ inbound.setPassword(mdp); /*}*/
//        else { return new ResponseEntity<>(HttpStatus.BAD_REQUEST); }

        String prenom;
        prenom = inbound.getFirstname();
        if(firstname == null){ inbound.setFirstname(prenom); }
        if (firstname!=null) { inbound.setFirstname(firstname); }

        String contrat;
        contrat = inbound.getContract();
        if(contract == null){ inbound.setContract(contrat); }
        if (contract!=null) { inbound.setContract(contract); }

        String localisation;
        localisation = inbound.getLocation();
        if(location == null){ inbound.setLocation(localisation); }
        if (location!=null) { inbound.setLocation(location); }

        String departement;
        departement = inbound.getDepartment();
        if(department == null){ inbound.setDepartment(departement); }
        if (department!=null) { inbound.setDepartment(department); }

        Date date_debut;
        date_debut = inbound.getDate_start();
        if(date_start == null){ inbound.setDate_start(date_debut); }
        if(date_start!=null){ inbound.setDate_start(date_start);}

        Date date_fin;
        date_fin = inbound.getDate_end();
        if(date_end == null){ inbound.setDate_end(date_fin); }
        if(date_end!=null){ inbound.setDate_end(date_end); }
        inbound.setDate_end(date_fin);

        String service_;
        service_ = inbound.getService();
        if(service == null){ inbound.setService(service_); }
        if (service!=null) { inbound.setService(service); }

        String bu;
        bu = inbound.getBusiness_unit();
        if(business_unit == null){ inbound.setBusiness_unit(bu); }
        if (business_unit!=null) { inbound.setBusiness_unit(business_unit); }

        List<Manager> managers = Collections.emptyList();
        if(manager_name !=  null)
            managers = managerRepository.findByName(manager_name);

        //TO DO: R√©cuperer les roles de UsersRole + v√©rifier si l'user √† un role existant si inexstant 404
//        List<UsersRole> roles = Collections.emptyList();
//        if(role_type != null) {
//            roles = userRoleRepository.findUsersRoleByType(role_type);
//        }
        //        if(!roles.isEmpty()){
//            UsersRole role = roles.get(0);
//            inbound.setRole(role);
//        }

        String type;
        type = inbound.getRole_type();
        if(role_type == null){ inbound.setRole_type(type); }
        if(role_type!=null){ inbound.setRole_type(role_type); }

//        if(!managers.isEmpty()){
//            // 4. si il est null retourne 404, message le manager n'existe pas
//            Manager manager = managers.get(0);
//            inbound.setManager(manager);
//            if (manager_name != null) {
//                inbound.setManager_name(manager_name);
//            }
//        }

        String manager;
        manager = inbound.getManager_name();
        if(manager_name == null){ inbound.setManager_name(manager); }
        if(manager_name!=null){ inbound.setManager_name(manager_name); }

        inbound.setGot_iphone(got_iphone);

        userRepository.save(inbound);
        return new ResponseEntity<>(HttpStatus.OK);
    }

    @RequestMapping(path = "/disable/{id}", method = RequestMethod.PUT)
    @ResponseBody
    public ResponseEntity disableUser(@PathVariable String id) {

        List<User> users = userRepository.findById(Integer.parseInt(id));
        if (users.isEmpty()) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
        User inbound = users.get(0);
        if (inbound.getIs_enabled()) {
            inbound.setIs_enabled(false);
            userRepository.save(inbound);
            return new ResponseEntity<>(HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_MODIFIED);
        }
    }

    @RequestMapping(path = "/enable/{id}", method = RequestMethod.PUT)
    @ResponseBody
    public ResponseEntity enableUser(@PathVariable String id) {

        List<User> users = userRepository.findById(Integer.parseInt(id));
        if (users.isEmpty()) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
        User inbound = users.get(0);
        if (!inbound.getIs_enabled()) {
            inbound.setIs_enabled(true);
            userRepository.save(inbound);
            return new ResponseEntity<>(HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_MODIFIED);
        }
    }

    // TO DO : TO CLEAN THE RETURN RESPONSE ENTITY MESSAGE & TEST if A MODIFIER
//    @RequestMapping(path = "/byrole", method = RequestMethod.GET)
//    @ResponseBody
//    public ResponseEntity getUsersByRole(@RequestParam String role_type) { // return 200 + list
//        // This returns a JSON or XML with the users
//        List<User> users = (List<User>) userRepository.findAll();
////        Iterable<UsersRole> role;
////        role = userRoleRepository.findAll();
//        if(role_type == null){ // TEST A MODIFIER
//            return new ResponseEntity<>("Aucun n'utilisateur trouv√©", HttpStatus.NOT_FOUND);
//        } else
//            return new ResponseEntity<>(userRepository.findByRole_type(role_type), HttpStatus.OK);// WORK FINE !
//    }

    @RequestMapping(path = "/user/{id}", method = RequestMethod.GET)
    @ResponseBody
    public ResponseEntity getUserById(@PathVariable String id) {

        List<User> user = userRepository.findById(Integer.parseInt(id));
        if (user.isEmpty()) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
       else {
            return new ResponseEntity<>(user, HttpStatus.OK);// WORK FINE !
        }
    }
}


